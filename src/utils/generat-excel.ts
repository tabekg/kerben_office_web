import ExcelJS from 'exceljs'
import {saveAs} from 'file-saver'
import {formatDateDDMMYYYY, parseDate} from './parsers'
import {IInvoice} from '../types'

const LLC = {
  '0.4': '–û—Å–û–û "–ê–ª—å –ù—É—Ä"',
  –ö–∞—Ä–∞—Ç–∞–π: '–û—Å–û–û "–ö–µ—Ä–±–µ–Ω –ê–≤—Ç–æ –¢—Ä–∞–Ω—Å"',
  –î–æ—Å—Ç—É–∫: '–û—Å–û–û "–ê–ª—å –ù—É—Ä"',
  –¢–µ—Ä–º–∏–Ω–∞–ª: '–û—Å–û–û "–ö–µ—Ä–±–µ–Ω –ê–≤—Ç–æ –¢—Ä–∞–Ω—Å"',
}

export const exportToExcel = async (
  data: IInvoice[],
  fileName: string,
  date: {
    start: Date | null
    end: Date | null
  },
  title: string
) => {
  const workbook = new ExcelJS.Workbook()

  const worksheet = workbook.addWorksheet('–õ–∏—Å—Ç1')

  worksheet.columns = [
    {width: 7},
    {width: 33},
    {width: 15},
    {width: 15},
    {width: 15},
    {width: 15},
  ]

  const date_ = `—Å ${formatDateDDMMYYYY(date.start!)}–≥ –ø–æ ${formatDateDDMMYYYY(
    date.end!
  )}–≥`

  worksheet.mergeCells('A1:F5')
  worksheet.mergeCells('C6:D6')
  worksheet.mergeCells('E6:F6')
  worksheet.getCell('A1').value =
    'ùóîùóûùóß\n—Å–≤–µ—Ä–∫–∏ –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤ –º–µ–∂–¥—É ' +
    // @ts-ignore
    LLC[title] +
    ' –∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ\n"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞" –ø—Ä–∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ\n–ø—Ä–∏ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–µ –≤–∞–ª—é—Ç–∞ —Å–≤–µ—Ä–∫–∏ KGS (–≠–ù–ü)\n' +
    date_
  worksheet.getCell('A1').alignment = {horizontal: 'center', vertical: 'middle'}
  worksheet.getCell('A2').font = {size: 10}

  worksheet.getCell('A6').value = '‚Ññ'
  worksheet.getCell('B6').value = '–ó–∞–ø–∏—Å–∏ ‚Ññ–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏'
  worksheet.getCell('B6').font = {bold: true}
  // @ts-ignore
  worksheet.getCell('C6').value = LLC[title]
  worksheet.getCell('E6').value = '–ì–ü–¢–ò'

  worksheet.addRow(['', '', '–î–¢', '–ö–¢', '–î–¢', '–ö–¢'])

  let numb = 0

  data.forEach((item) => {
    numb++

    worksheet.addRow([
      numb,
      `‚Ññ${item.number} –æ—Ç ${formatDateDDMMYYYY(parseDate(item.date!)!)}`,
      item.sum,
      '',
      '',
      item.sum,
    ])

    item.transactions.forEach((transaction) => {
      numb++

      worksheet.addRow([
        numb,
        `${formatDateDDMMYYYY(parseDate(transaction.date)!)}: ‚Ññ${item.number}`,
        '',
        transaction.sum,
        transaction.sum,
        '',
      ])
    })
  })

  const itogoOboroty = data.reduce((a, b) => b.sum + a, 0)
  const itogoOboroty2 = data
    .flatMap((g) => g.transactions.map((o) => o.sum))
    .reduce((a, b) => b + a, 0)

  worksheet.addRow([])

  worksheet
    .addRow([
      '',
      '–ò—Ç–æ–≥–æ –æ–±–æ—Ä–æ—Ç—ã:',
      itogoOboroty,
      itogoOboroty2,
      itogoOboroty2,
      itogoOboroty,
    ])
    .getCell(2).font = {bold: true}

  worksheet
    .addRow([
      '',
      '–°–∞–ª—å–¥–æ –∫–æ–Ω–µ—á–Ω–æ–µ:',
      itogoOboroty - itogoOboroty2,
      '',
      '',
      itogoOboroty - itogoOboroty2,
    ])
    .getCell(2).font = {bold: true}

  let row = worksheet.addRow([
    `–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ\n"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞" –ø—Ä–∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ\n–ø—Ä–∏ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–µ –ø–µ—Ä–µ–¥ ${
      // @ts-ignore
      LLC[title]
    } –Ω–∞ ${formatDateDDMMYYYY(new Date())}\n—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${
      itogoOboroty - itogoOboroty2
    } —Å–æ–º.`,
  ])
  worksheet.mergeCells(`A${row.number}:F${row.number}`)
  row.height = 65
  worksheet.getCell(`A${row.number}`).alignment = {
    wrapText: true,
    vertical: 'middle',
  }

  worksheet.addRow([])

  row = worksheet.addRow([
    '',
    // @ts-ignore
    LLC[title] + '\n–ì–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä: ________',
    '',
    '–ì–ü–¢–ò\n–ì–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä: ________',
    '',
    '',
  ])
  worksheet.mergeCells(`B${row.number}:C${row.number}`)
  worksheet.mergeCells(`D${row.number}:E${row.number}`)
  row.height = 45
  worksheet.getCell(`A${row.number}`).alignment = {
    wrapText: true,
    vertical: 'top',
  }

  const buffer = await workbook.xlsx.writeBuffer()
  const excelBlob = new Blob([buffer], {
    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8',
  })
  saveAs(excelBlob, `${fileName}.xlsx`)
}
